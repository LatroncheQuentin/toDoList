{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nconst TodoList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n  useEffect(() => {\n    // Vérifier s'il y a une liste de tâches dans le localStorage\n    const storedTasks = localStorage.getItem(\"tasks\");\n    if (storedTasks) {\n      // Si une liste de tâches est trouvée, la récupérer et la mettre à jour dans l'état\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []);\n  const AddTask = () => {\n    if (newTask !== \"\") {\n      setTasks([{\n        text: newTask,\n        completed: false\n      }, ...tasks]);\n      localStorage.setItem(\"tasks\", JSON.stringify([{\n        text: newTask,\n        completed: false\n      }, ...tasks]));\n      setNewTask(\"\");\n    }\n  };\n  const removeTask = index => {\n    const updatedTasks = tasks.filter((_, i) => i !== index);\n    setTasks(updatedTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(updatedTasks));\n  };\n  const handleTaskChange = index => {\n    const updatedTasks = [...tasks];\n    const taskArray = [...tasks];\n    updatedTasks[index].completed = !updatedTasks[index].completed;\n    const completedTask = taskArray.splice(index, 1)[0];\n\n    // if (updatedTasks[index].completed) {\n    //   taskArray.push(completedTask);\n    // } else {\n    //   taskArray.unshift(completedTask);\n    // }\n\n    updatedTasks[index].completed === true ? taskArray.push(completedTask) : taskArray.unshift(completedTask);\n    setTasks(taskArray);\n    localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\n  };\n\n  // return (\n  //   <div>\n  //     <header className=\"header\">\n  //       <h1>To Do List</h1>\n  //     </header>\n  //     <div className=\"container-sm\">\n  //       <Container>\n  //         <ul className=\"list\">\n  //           {tasks.map((task, index) => (\n  //             <li\n  //               key={index}\n  //               style={{\n  //                 textDecoration: task.completed ? \"line-through\" : \"none\",\n  //               }}\n  //             >\n  //               <input\n  //                 type=\"checkbox\"\n  //                 checked={task.completed}\n  //                 onChange={() => handleTaskChange(index)}\n  //               />\n  //               &nbsp;&nbsp;\n  //               {task.text}\n  //               <Button onClick={() => removeTask(index)}>Remove Task</Button>\n  //             </li>\n  //           ))}\n  //         </ul>\n  //       </Container>\n  //       <Container className=\"form\">\n  //         <input\n  //           type=\"text\"\n  //           value={newTask}\n  //           onChange={(e) => setNewTask(e.target.value)}\n  //           autoFocus\n  //         />\n  //         <Button onClick={AddTask}>Add Task</Button>\n  //       </Container>\n  //     </div>\n  //   </div>\n  // );\n\n  // return (\n  //   <div className=\"bg-grey-700 text-grey-200\">\n  //     <header className=\"text-center\">\n  //       <h1>To Do List</h1>\n  //     </header>\n  //     <div className=\"container\">\n  //       <div className=\"row\">\n  //         <div className=\"col-2\"></div>\n  //         <ul className=\"list-group col\">\n  //           {tasks.map((task, index) => (\n  //             <li\n  //               key={index}\n  //               className=\"bg-grey-200 p-2 text-grey-700 bg-opacity-75 list-group-item d-flex justify-content-between align-items-center\"\n  //               style={{\n  //                 textDecoration: task.completed ? \"line-through\" : \"none\",\n  //               }}\n  //             >\n  //               <div className=\"col\">\n  //                 <input\n  //                   type=\"checkbox\"\n  //                   checked={task.completed}\n  //                   onChange={() => handleTaskChange(index)}\n  //                 />\n  //                 &nbsp;&nbsp;\n  //                 {task.text}\n  //               </div>\n  //               <div className=\"col-2\">\n  //                 <Button\n  //                   class=\"btn btn-light\"\n  //                   onClick={() => removeTask(index)}\n  //                 >\n  //                   Remove Task\n  //                 </Button>\n  //               </div>\n  //             </li>\n  //           ))}\n  //         </ul>\n  //         <div className=\"col-2\"></div>\n  //       </div>\n\n  //       <div className=\"row\">\n  //         <div className=\"col-12 d-flex justify-content-center align-items-center\">\n  //           <div className=\"col-4\">\n  //             <input\n  //               type=\"text\"\n  //               value={newTask}\n  //               onChange={(e) => setNewTask(e.target.value)}\n  //               autoFocus\n  //             />\n  //           </div>\n  //           <div className=\"col-2\">\n  //             <Button class=\"btn btn-light\" onClick={AddTask}>\n  //               Add Task\n  //             </Button>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n};\n_s(TodoList, \"MVDLnJyLcavc0PNJLnR8NMYsH5o=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","Button","Container","TodoList","_s","tasks","setTasks","newTask","setNewTask","storedTasks","localStorage","getItem","JSON","parse","AddTask","text","completed","setItem","stringify","removeTask","index","updatedTasks","filter","_","i","handleTaskChange","taskArray","completedTask","splice","push","unshift","_c","$RefreshReg$"],"sources":["/Users/quentin/Documents/atixis/to_do_list/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\n\nconst TodoList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n\n  useEffect(() => {\n    // Vérifier s'il y a une liste de tâches dans le localStorage\n    const storedTasks = localStorage.getItem(\"tasks\");\n    if (storedTasks) {\n      // Si une liste de tâches est trouvée, la récupérer et la mettre à jour dans l'état\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []);\n\n  const AddTask = () => {\n    if (newTask !== \"\") {\n      setTasks([{ text: newTask, completed: false }, ...tasks]);\n      localStorage.setItem(\n        \"tasks\",\n        JSON.stringify([{ text: newTask, completed: false }, ...tasks])\n      );\n      setNewTask(\"\");\n    }\n  };\n\n  const removeTask = (index) => {\n    const updatedTasks = tasks.filter((_, i) => i !== index);\n    setTasks(updatedTasks);\n    localStorage.setItem(\"tasks\", JSON.stringify(updatedTasks));\n  };\n\n  const handleTaskChange = (index) => {\n    const updatedTasks = [...tasks];\n    const taskArray = [...tasks];\n    updatedTasks[index].completed = !updatedTasks[index].completed;\n    const completedTask = taskArray.splice(index, 1)[0];\n\n    // if (updatedTasks[index].completed) {\n    //   taskArray.push(completedTask);\n    // } else {\n    //   taskArray.unshift(completedTask);\n    // }\n\n    updatedTasks[index].completed === true\n      ? taskArray.push(completedTask)\n      : taskArray.unshift(completedTask);\n\n    setTasks(taskArray);\n    localStorage.setItem(\"tasks\", JSON.stringify(taskArray));\n  };\n\n  // return (\n  //   <div>\n  //     <header className=\"header\">\n  //       <h1>To Do List</h1>\n  //     </header>\n  //     <div className=\"container-sm\">\n  //       <Container>\n  //         <ul className=\"list\">\n  //           {tasks.map((task, index) => (\n  //             <li\n  //               key={index}\n  //               style={{\n  //                 textDecoration: task.completed ? \"line-through\" : \"none\",\n  //               }}\n  //             >\n  //               <input\n  //                 type=\"checkbox\"\n  //                 checked={task.completed}\n  //                 onChange={() => handleTaskChange(index)}\n  //               />\n  //               &nbsp;&nbsp;\n  //               {task.text}\n  //               <Button onClick={() => removeTask(index)}>Remove Task</Button>\n  //             </li>\n  //           ))}\n  //         </ul>\n  //       </Container>\n  //       <Container className=\"form\">\n  //         <input\n  //           type=\"text\"\n  //           value={newTask}\n  //           onChange={(e) => setNewTask(e.target.value)}\n  //           autoFocus\n  //         />\n  //         <Button onClick={AddTask}>Add Task</Button>\n  //       </Container>\n  //     </div>\n  //   </div>\n  // );\n\n  // return (\n  //   <div className=\"bg-grey-700 text-grey-200\">\n  //     <header className=\"text-center\">\n  //       <h1>To Do List</h1>\n  //     </header>\n  //     <div className=\"container\">\n  //       <div className=\"row\">\n  //         <div className=\"col-2\"></div>\n  //         <ul className=\"list-group col\">\n  //           {tasks.map((task, index) => (\n  //             <li\n  //               key={index}\n  //               className=\"bg-grey-200 p-2 text-grey-700 bg-opacity-75 list-group-item d-flex justify-content-between align-items-center\"\n  //               style={{\n  //                 textDecoration: task.completed ? \"line-through\" : \"none\",\n  //               }}\n  //             >\n  //               <div className=\"col\">\n  //                 <input\n  //                   type=\"checkbox\"\n  //                   checked={task.completed}\n  //                   onChange={() => handleTaskChange(index)}\n  //                 />\n  //                 &nbsp;&nbsp;\n  //                 {task.text}\n  //               </div>\n  //               <div className=\"col-2\">\n  //                 <Button\n  //                   class=\"btn btn-light\"\n  //                   onClick={() => removeTask(index)}\n  //                 >\n  //                   Remove Task\n  //                 </Button>\n  //               </div>\n  //             </li>\n  //           ))}\n  //         </ul>\n  //         <div className=\"col-2\"></div>\n  //       </div>\n\n  //       <div className=\"row\">\n  //         <div className=\"col-12 d-flex justify-content-center align-items-center\">\n  //           <div className=\"col-4\">\n  //             <input\n  //               type=\"text\"\n  //               value={newTask}\n  //               onChange={(e) => setNewTask(e.target.value)}\n  //               autoFocus\n  //             />\n  //           </div>\n  //           <div className=\"col-2\">\n  //             <Button class=\"btn btn-light\" onClick={AddTask}>\n  //               Add Task\n  //             </Button>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n};\n\nexport default TodoList;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kCAAkC;AACzC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,SAAS,MAAM,2BAA2B;AAEjD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MACf;MACAH,QAAQ,CAACM,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIP,OAAO,KAAK,EAAE,EAAE;MAClBD,QAAQ,CAAC,CAAC;QAAES,IAAI,EAAER,OAAO;QAAES,SAAS,EAAE;MAAM,CAAC,EAAE,GAAGX,KAAK,CAAC,CAAC;MACzDK,YAAY,CAACO,OAAO,CAClB,OAAO,EACPL,IAAI,CAACM,SAAS,CAAC,CAAC;QAAEH,IAAI,EAAER,OAAO;QAAES,SAAS,EAAE;MAAM,CAAC,EAAE,GAAGX,KAAK,CAAC,CAChE,CAAC;MACDG,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC;EAED,MAAMW,UAAU,GAAIC,KAAK,IAAK;IAC5B,MAAMC,YAAY,GAAGhB,KAAK,CAACiB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKJ,KAAK,CAAC;IACxDd,QAAQ,CAACe,YAAY,CAAC;IACtBX,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,SAAS,CAACG,YAAY,CAAC,CAAC;EAC7D,CAAC;EAED,MAAMI,gBAAgB,GAAIL,KAAK,IAAK;IAClC,MAAMC,YAAY,GAAG,CAAC,GAAGhB,KAAK,CAAC;IAC/B,MAAMqB,SAAS,GAAG,CAAC,GAAGrB,KAAK,CAAC;IAC5BgB,YAAY,CAACD,KAAK,CAAC,CAACJ,SAAS,GAAG,CAACK,YAAY,CAACD,KAAK,CAAC,CAACJ,SAAS;IAC9D,MAAMW,aAAa,GAAGD,SAAS,CAACE,MAAM,CAACR,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEnD;IACA;IACA;IACA;IACA;;IAEAC,YAAY,CAACD,KAAK,CAAC,CAACJ,SAAS,KAAK,IAAI,GAClCU,SAAS,CAACG,IAAI,CAACF,aAAa,CAAC,GAC7BD,SAAS,CAACI,OAAO,CAACH,aAAa,CAAC;IAEpCrB,QAAQ,CAACoB,SAAS,CAAC;IACnBhB,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,SAAS,CAACQ,SAAS,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACtB,EAAA,CAtJID,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAwJd,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}